// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `fixture.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
pub struct MessageFixture {
    // message fields
    pub number: i32,
    pub text: ::std::string::String,
    pub repeated_number: ::std::vec::Vec<i32>,
    pub msg: ::protobuf::MessageField<message_fixture::Nested>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageFixture {
    fn default() -> &'a MessageFixture {
        <MessageFixture as ::protobuf::Message>::default_instance()
    }
}

impl MessageFixture {
    pub fn new() -> MessageFixture {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "number",
            |m: &MessageFixture| { &m.number },
            |m: &mut MessageFixture| { &mut m.number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &MessageFixture| { &m.text },
            |m: &mut MessageFixture| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "repeated_number",
            |m: &MessageFixture| { &m.repeated_number },
            |m: &mut MessageFixture| { &mut m.repeated_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, message_fixture::Nested>(
            "msg",
            |m: &MessageFixture| { &m.msg },
            |m: &mut MessageFixture| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageFixture>(
            "MessageFixture",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for MessageFixture {
    fn is_initialized(&self) -> bool {
        for v in &self.msg {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.number = is.read_int32()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.text = is.read_string()?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.repeated_number)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into_field(wire_type, is, &mut self.msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(1, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.text);
        }
        for value in &self.repeated_number {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.msg.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.number != 0 {
            os.write_int32(1, self.number)?;
        }
        if !self.text.is_empty() {
            os.write_string(2, &self.text)?;
        }
        for v in &self.repeated_number {
            os.write_int32(3, *v)?;
        };
        if let Some(v) = self.msg.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> MessageFixture {
        MessageFixture::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static MessageFixture {
        static instance: MessageFixture = MessageFixture {
            number: 0,
            text: ::std::string::String::new(),
            repeated_number: ::std::vec::Vec::new(),
            msg: ::protobuf::MessageField::none(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for MessageFixture {
    fn clear(&mut self) {
        self.number = 0;
        self.text.clear();
        self.repeated_number.clear();
        self.msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageFixture {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageFixture {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MessageFixture`
pub mod message_fixture {
    #[derive(PartialEq,Clone,Default)]
    pub struct Nested {
        // message fields
        pub foo: i32,
        // special fields
        pub unknown_fields: ::protobuf::UnknownFields,
        pub cached_size: ::protobuf::rt::CachedSize,
    }

    impl<'a> ::std::default::Default for &'a Nested {
        fn default() -> &'a Nested {
            <Nested as ::protobuf::Message>::default_instance()
        }
    }

    impl Nested {
        pub fn new() -> Nested {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "foo",
                |m: &Nested| { &m.foo },
                |m: &mut Nested| { &mut m.foo },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Nested>(
                "MessageFixture.Nested",
                1,
                fields,
            )
        }
    }

    impl ::protobuf::Message for Nested {
        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            while !is.eof()? {
                let (field_number, wire_type) = is.read_tag_unpack()?;
                match field_number {
                    1 => {
                        if wire_type != ::protobuf::wire_format::WireTypeVarint {
                            return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                        }
                        self.foo = is.read_int32()?;
                    },
                    _ => {
                        ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u32 {
            let mut my_size = 0;
            if self.foo != 0 {
                my_size += ::protobuf::rt::value_size(1, self.foo, ::protobuf::wire_format::WireTypeVarint);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
            self.cached_size.set(my_size);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
            if self.foo != 0 {
                os.write_int32(1, self.foo)?;
            }
            os.write_unknown_fields(self.get_unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn get_cached_size(&self) -> u32 {
            self.cached_size.get()
        }

        fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
            &self.unknown_fields
        }

        fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
            &mut self.unknown_fields
        }

        fn new() -> Nested {
            Nested::new()
        }

        fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
            ::protobuf::reflect::MessageDescriptor::new_generated_2(super::file_descriptor(), 1)
        }

        fn default_instance() -> &'static Nested {
            static instance: Nested = Nested {
                foo: 0,
                unknown_fields: ::protobuf::UnknownFields::new(),
                cached_size: ::protobuf::rt::CachedSize::new(),
            };
            &instance
        }
    }

    impl ::protobuf::Clear for Nested {
        fn clear(&mut self) {
            self.foo = 0;
            self.unknown_fields.clear();
        }
    }

    impl ::std::fmt::Debug for Nested {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Nested {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rfixture.proto\x12\x07fixture\"\xb3\x01\n\x0eMessageFixture\x12\x16\n\
    \x06number\x18\x01\x20\x01(\x05R\x06number\x12\x12\n\x04text\x18\x02\x20\
    \x01(\tR\x04text\x12'\n\x0frepeated_number\x18\x03\x20\x03(\x05R\x0erepe\
    atedNumber\x120\n\x03msg\x18\x04\x20\x01(\x0b2\x1e.fixture.MessageFixtur\
    e.NestedR\x03msg\x1a\x1a\n\x06Nested\x12\x10\n\x03foo\x18\x01\x20\x01(\
    \x05R\x03fooJ\xf9\x02\n\x06\x12\x04\0\0\x0c\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x10\n\n\n\x02\x04\0\x12\x04\x04\0\
    \x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x16\n\x0c\n\x04\x04\0\x03\0\
    \x12\x04\x05\x02\x07\x03\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x05\n\x10\n\
    \r\n\x06\x04\0\x03\0\x02\0\x12\x03\x06\x04\x12\n\x0e\n\x07\x04\0\x03\0\
    \x02\0\x05\x12\x03\x06\x04\t\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\
    \x06\n\r\n\x0e\n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x06\x10\x11\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x08\x02\x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x08\x02\x07\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x08\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x08\x11\x12\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\
    \x02\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\t\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x10\
    \x11\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x02%\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03\n\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\n\x0b\x10\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\x11\x20\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03\n#$\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0b\x02\x11\n\x0c\n\
    \x05\x04\0\x02\x03\x06\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\
    \x12\x03\x0b\t\x0c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0b\x0f\x10b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        let mut messages = ::std::vec::Vec::new();
        messages.push(MessageFixture::generated_message_descriptor_data());
        messages.push(message_fixture::Nested::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
